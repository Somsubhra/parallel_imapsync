#!/usr/bin/env python
import sys

MAKEFILE_PATH = "Makefile"
LOGFILE_PATH = "mass_imap_sync.log"


class MakefileGenerator:
    def __init__(self, data_file_path):
        self.data_file_path = data_file_path
        self.data_list = []

        with open(self.data_file_path) as data_file:
            for data_line in data_file.readlines():
                data_entities = data_line.split(",")
                self.data_list.append({
                    "remote_username": data_entities[0].rstrip(),
                    "local_username": data_entities[1].rstrip(),
                    "remote_password": data_entities[2].rstrip(),
                    "local_password": data_entities[3].rstrip(),
                    "remote_imap_host":  data_entities[4].rstrip(),
                    "remote_imap_port": data_entities[5].rstrip(),
                    "local_imap_host": data_entities[6].rstrip()
                })

        data_file.close()

    @staticmethod
    def escape_bash_string(s):
      result = ""
      special_chars = "\$!"
      for char in s:
        if char in special_chars:
          result += "\\"
        result += char
      return result

    def generate(self):
        num_records = len(self.data_list)

        makefile_targets = dict()

        makefile_targets["all"] = ""

        for index in range(num_records):
            target_string = "record" + str(index)
            makefile_targets["all"] += target_string + " "
            record = self.data_list[index]
            makefile_targets[target_string] = "imapsync --host1 \"" + MakefileGenerator.escape_bash_string(record["remote_imap_host"]) + "\"" \
                                              " --user1 \"" + MakefileGenerator.escape_bash_string(record["remote_username"]) + "\"" \
                                              " --port1 " + MakefileGenerator.escape_bash_string(record["remote_imap_port"]) + \
                                              " --password1 \"" + MakefileGenerator.escape_bash_string(record["remote_password"]) + "\"" \
                                              " --authmech1 LOGIN" \
                                              " --host2 \"" + MakefileGenerator.escape_bash_string(record["local_imap_host"]) + "\"" \
                                              " --port2 143" \
                                              " --user2 \"" + MakefileGenerator.escape_bash_string(record["local_username"]) + "\"" \
                                              " --password2 \"" + MakefileGenerator.escape_bash_string(record["local_password"]) + "\"" \
                                              " --authmech2 LOGIN" \
                                              " --subscribe" \
                                              " --sep2 \"/\"" \
                                              " --prefix2 \"oldmails/\"" \
                                              " --sep1 \"/\" &&" \
                                              " echo \"[`date`] " + MakefileGenerator.escape_bash_string(record["remote_username"]) + " -> " + \
                                              MakefileGenerator.escape_bash_string(record["local_username"]) + \
                                              " exited with code $$?\" >> " \
                                              + LOGFILE_PATH

        with open(MAKEFILE_PATH, "wb") as makefile:
            makefile.write("all: " + makefile_targets["all"] + "\n\n")
            for key, value in makefile_targets.iteritems():
                if not key == "all":
                    makefile.write(key + ":\n")
                    makefile.write("\t" + value + "\n\n")

        makefile.close()


def main():
    if len(sys.argv) < 2:
        print "Usage: gen_imapsync_makefile <data_file.csv>"
        print "CSV Format: <remote_username>,<local_username>,<remote_password>,<local_password>,<remote_imap_host>," \
              "<remote_imap_port>,<local_imap_host>"
        exit()

    data_file = sys.argv[1]
    makefile_generator = MakefileGenerator(data_file_path=data_file)
    makefile_generator.generate()

if __name__ == "__main__":
    main()
